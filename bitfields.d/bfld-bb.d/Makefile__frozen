# Thu 23 Jan 17:56:06 UTC 2025

all:	build
.PHONY:	all

build:	_hint_pr_logo	_hint_build_command_line
	@pio -f -c vim run -v ; echo
	@cat ./scripts.d/show2K1Odyssey.txt

_hint_pr_logo:
	@./scripts.d/print_logo.sh

# problem is with sequence of the _hint vs printing the logo

# https://docs.platformio.org/en/stable/boards/atmelavr/uno.html
#     output of the command gives an alternate uri:
#       https://docs.platformio.org/page/boards/atmelavr/uno.html

boards:
	pio boards

project_init:
	pio project init --board uno

xxdevlist:
	pio device list

nsterm:
	sleep 2; ./comm_program.sh /dev/ttyACM0

term:
	sleep 2; ./comm_program.sh /dev/ttyACM0

upload:
	pio run -t upload

install: upload term

upgrade:
	pio upgrade

platform_avr:
	pio pkg update -p atmelavr@5.0.0

platforms: platform_avr

# https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_update.html#cmd-pkg-update

pkgupdate:
	pio pkg update

pkglist:
	pio pkg list

# https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_outdated.html#cmd-pkg-outdated

outdated:
	pio pkg outdated


# result:

# $  pio pkg outdated
# Checking  [####################################]  100%          

# Semantic Versioning color legend:
# <Major Update>  backward-incompatible updates
# <Minor Update>  backward-compatible features
# <Patch Update>  backward-compatible bug fixes

# Package    Current    Wanted    Latest    Type      Environments
# ---------  ---------  --------  --------  --------  --------------
# atmelavr   4.2.0      5.0.0     5.0.0     Platform  ATmega2560

# 2024 14 Jan: it is highlighted in the top line's color: <Major Update>

# see if ${1} is a thing in this Makefile or if it is a different syntax &c.

fancygits:
	git ls-files --error-unmatch ./platformio.ini
	echo stanza
	git ls-files --error-unmatch ./diagram.json
	echo stanza
	git ls-files --error-unmatch ./wokwi.toml
	echo stanza
	git ls-files --error-unmatch ./wokwi-project.txt
	echo ; echo '  end.'

# git ls-files --error-unmatch ${1}

# find all tabs and remove them in the status, to help form .gitignore entries
git_status:
	@git status | cat | tr -d '\t'

pwd:
	@echo -n '  ..'
	@pwd | cut -b 27-

clean:	_hint_clean_aa
	@pio run -t clean

distclean: clean	_hint_distclean_aa
	@rm -rf ./.pio
	@echo

# @echo ; echo "    rm -rf ./.pio"    ; rm -rf ./.pio ; \

# --- ansi macros and such

ECHO_BIN=/usr/bin/echo # external echo supports \e escape

_hint_clean_aa:
	@echo
	@${ECHO_BIN} -en "\e[0;1;33;40m" # yellow
	@${ECHO_BIN} -en "    ["
	@${ECHO_BIN} -en "\e[0;1;32;40m" # green
	@${ECHO_BIN} -en "pio run -t clean"
	@${ECHO_BIN} -en "\e[0;1;33;40m" # yellow
	@${ECHO_BIN} -en "]"
	@${ECHO_BIN} -e  "\e[0m"
	@echo
	@sleep 1.2 # gestural; training only

_hint_distclean_aa:
	@echo
	@${ECHO_BIN} -en "\e[0;1;33;40m"
	@${ECHO_BIN} -en "    ["
	@${ECHO_BIN} -en "\e[0;1;32;40m"
	@${ECHO_BIN} -en "rm -rf ./.pio"
	@${ECHO_BIN} -en "\e[0;1;33;40m"
	@${ECHO_BIN} -en "]"
	@${ECHO_BIN} -e  "\e[0m"
	@echo
	@sleep 1.2

_hint_build_command_line:
	@echo # internal echo
	@${ECHO_BIN} -en "\e[0;1;33;40m"
	@${ECHO_BIN} -en "    ["
	@${ECHO_BIN} -en "\e[0;1;32;40m"
	@${ECHO_BIN} -en "pio -f -c vim run -v"
	@${ECHO_BIN} -en "\e[0;1;33;40m"
	@${ECHO_BIN} -en "]"
	@${ECHO_BIN} -e  "\e[0m"
	@echo
	@sleep 1.2

# status: 100% more fun than just a moment ago. ;)

# end.
